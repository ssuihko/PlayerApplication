// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlayerApplication.Data;

#nullable disable

namespace PlayerApplication.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240214112303_ThirdInitiateTables")]
    partial class ThirdInitiateTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlayerApplication.Models.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.HasKey("Id");

                    b.ToTable("chat");

                    b.HasData(
                        new
                        {
                            Id = "6facb665-5ea9-4bbb-8b00-8d84e34fec4e",
                            Channel = "Global"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("inventories");

                    b.HasData(
                        new
                        {
                            Id = "85b84f78-e8c0-465c-ba70-c40c2e25c67c"
                        },
                        new
                        {
                            Id = "b27823d2-b7e6-445c-a175-a68d85d3dbb3"
                        },
                        new
                        {
                            Id = "a99f6fcf-a1c6-4465-b600-4c01a65fa37f"
                        },
                        new
                        {
                            Id = "77d3924f-fe76-4aff-8e9b-04714ba6ee57"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("items");

                    b.HasData(
                        new
                        {
                            Id = "8229d094-4124-4e64-a90d-af5dd3e65e1f",
                            Description = "Heals 5 hp",
                            InventoryId = "85b84f78-e8c0-465c-ba70-c40c2e25c67c",
                            Name = "Small Healing Potion",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "a950ebfd-767f-4d12-9df1-cab0de202709",
                            Description = "Heals 20 hp",
                            InventoryId = "85b84f78-e8c0-465c-ba70-c40c2e25c67c",
                            Name = "Large Healing Potion",
                            Price = 10f
                        },
                        new
                        {
                            Id = "1b3e5d05-9b21-4295-9a03-e36e9a96f252",
                            Description = "Deals 5 damage",
                            InventoryId = "b27823d2-b7e6-445c-a175-a68d85d3dbb3",
                            Name = "Two handed sword",
                            Price = 50f
                        },
                        new
                        {
                            Id = "34a79d72-3456-4041-852e-b5617a4ffb21",
                            Description = "Deals 3 fire damage",
                            InventoryId = "b27823d2-b7e6-445c-a175-a68d85d3dbb3",
                            Name = "Magic staff",
                            Price = 60f
                        },
                        new
                        {
                            Id = "8fc1d792-0ea6-4563-8e3f-ef99fbd04a9b",
                            Description = "Heals 5 hp",
                            InventoryId = "a99f6fcf-a1c6-4465-b600-4c01a65fa37f",
                            Name = "Small Healing Potion",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "84b38adf-dce8-4133-a0b1-77f8470106a7",
                            Description = "Heals 20 hp",
                            InventoryId = "77d3924f-fe76-4aff-8e9b-04714ba6ee57",
                            Name = "Large Healing Potion",
                            Price = 10f
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Message", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<string>("ChatId")
                        .HasColumnType("text")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("post_date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("PlayerId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("messages");

                    b.HasData(
                        new
                        {
                            PlayerId = "05734c6b-7836-4c46-b42c-88cd90f765a5",
                            ChatId = "6facb665-5ea9-4bbb-8b00-8d84e34fec4e",
                            PostDate = new DateTime(2024, 2, 14, 11, 23, 2, 508, DateTimeKind.Utc).AddTicks(2215),
                            Text = "Hi yall!"
                        },
                        new
                        {
                            PlayerId = "c7d07e91-c014-4cee-bb8a-364af790b34e",
                            ChatId = "6facb665-5ea9-4bbb-8b00-8d84e34fec4e",
                            PostDate = new DateTime(2024, 2, 14, 11, 23, 2, 508, DateTimeKind.Utc).AddTicks(2293),
                            Text = "Hi new user!"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Class")
                        .HasColumnType("integer")
                        .HasColumnName("class");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Exp")
                        .HasColumnType("integer")
                        .HasColumnName("exp");

                    b.Property<int>("Hp")
                        .HasColumnType("integer")
                        .HasColumnName("hp");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Race")
                        .HasColumnType("integer")
                        .HasColumnName("race");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "05734c6b-7836-4c46-b42c-88cd90f765a5",
                            AccessFailedCount = 0,
                            Class = 1,
                            ConcurrencyStamp = "ddc9e27d-8579-433e-b69d-14289fe8e9b6",
                            Email = "juha88@gmail.com",
                            EmailConfirmed = false,
                            Exp = 50,
                            Hp = 100,
                            InventoryId = "a99f6fcf-a1c6-4465-b600-4c01a65fa37f",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Race = 1,
                            Role = 1,
                            SecurityStamp = "0e0708f6-773b-4ae0-939d-3d460f09796f",
                            TwoFactorEnabled = false,
                            UserName = "Juha88"
                        },
                        new
                        {
                            Id = "c7d07e91-c014-4cee-bb8a-364af790b34e",
                            AccessFailedCount = 0,
                            Class = 6,
                            ConcurrencyStamp = "681b9f39-3cc2-406b-a731-607e23ba1600",
                            Email = "tyler1@gmail.com",
                            EmailConfirmed = false,
                            Exp = 70,
                            Hp = 150,
                            InventoryId = "77d3924f-fe76-4aff-8e9b-04714ba6ee57",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Race = 0,
                            Role = 1,
                            SecurityStamp = "c4f7901b-d8bf-4627-bea4-2eaede073f14",
                            TwoFactorEnabled = false,
                            UserName = "Tyler1"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("shops");

                    b.HasData(
                        new
                        {
                            Id = "b1573d4f-d447-4349-aa71-8496edbc75fc",
                            InventoryId = "85b84f78-e8c0-465c-ba70-c40c2e25c67c",
                            Name = "Potion Dealer"
                        },
                        new
                        {
                            Id = "f81345bb-21e7-484c-b273-40ae9c0573e8",
                            InventoryId = "b27823d2-b7e6-445c-a175-a68d85d3dbb3",
                            Name = "Weapons Shop"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerApplication.Models.Item", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Message", b =>
                {
                    b.HasOne("PlayerApplication.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerApplication.Models.Player", "Player")
                        .WithMany("Messages")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Shop", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PlayerApplication.Models.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
