// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlayerApplication.Data;

#nullable disable

namespace PlayerApplication.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240214200447_ChangeEnumType")]
    partial class ChangeEnumType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlayerApplication.Models.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.HasKey("Id");

                    b.ToTable("chat");

                    b.HasData(
                        new
                        {
                            Id = "feb339e0-2b59-4bf8-9a9a-2a5a8746abc8",
                            Channel = "Global"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("inventories");

                    b.HasData(
                        new
                        {
                            Id = "b100ae64-7302-4ac5-b389-3c13b1eeb76b"
                        },
                        new
                        {
                            Id = "2f4dbcef-d865-4525-8233-26142f311aee"
                        },
                        new
                        {
                            Id = "f55b1758-bcec-4679-b11b-0158813a66a7"
                        },
                        new
                        {
                            Id = "d2c21b88-3f84-4645-8e71-10b69c537bc5"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("items");

                    b.HasData(
                        new
                        {
                            Id = "22f0caf7-e36b-4b66-bb02-f72f86e34b7b",
                            Description = "Heals 5 hp",
                            InventoryId = "b100ae64-7302-4ac5-b389-3c13b1eeb76b",
                            Name = "Small Healing Potion",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "342d436b-0445-465d-b7af-f1f52fbd3c73",
                            Description = "Heals 20 hp",
                            InventoryId = "b100ae64-7302-4ac5-b389-3c13b1eeb76b",
                            Name = "Large Healing Potion",
                            Price = 10f
                        },
                        new
                        {
                            Id = "ffc9a8f9-4b67-4a43-a161-70a89d169506",
                            Description = "Deals 5 damage",
                            InventoryId = "2f4dbcef-d865-4525-8233-26142f311aee",
                            Name = "Two handed sword",
                            Price = 50f
                        },
                        new
                        {
                            Id = "c3a101ce-30e9-41d6-9afa-9d78a8d49c99",
                            Description = "Deals 3 fire damage",
                            InventoryId = "2f4dbcef-d865-4525-8233-26142f311aee",
                            Name = "Magic staff",
                            Price = 60f
                        },
                        new
                        {
                            Id = "60f59f55-5aba-4535-8c59-026f1498e350",
                            Description = "Heals 5 hp",
                            InventoryId = "f55b1758-bcec-4679-b11b-0158813a66a7",
                            Name = "Small Healing Potion",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "9a200cec-b53d-4120-91d6-e8e014a8f9bb",
                            Description = "Heals 20 hp",
                            InventoryId = "d2c21b88-3f84-4645-8e71-10b69c537bc5",
                            Name = "Large Healing Potion",
                            Price = 10f
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Message", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<string>("ChatId")
                        .HasColumnType("text")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("post_date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("PlayerId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("messages");

                    b.HasData(
                        new
                        {
                            PlayerId = "d775d10a-ab21-439e-8fb6-75506a5095e2",
                            ChatId = "feb339e0-2b59-4bf8-9a9a-2a5a8746abc8",
                            PostDate = new DateTime(2024, 2, 14, 20, 4, 46, 556, DateTimeKind.Utc).AddTicks(4711),
                            Text = "Hi yall!"
                        },
                        new
                        {
                            PlayerId = "b0afa3d2-2a85-4668-84fc-6234649a57b6",
                            ChatId = "feb339e0-2b59-4bf8-9a9a-2a5a8746abc8",
                            PostDate = new DateTime(2024, 2, 14, 20, 4, 46, 556, DateTimeKind.Utc).AddTicks(4812),
                            Text = "Hi new user!"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Class")
                        .HasColumnType("integer")
                        .HasColumnName("class");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Exp")
                        .HasColumnType("integer")
                        .HasColumnName("exp");

                    b.Property<int>("Hp")
                        .HasColumnType("integer")
                        .HasColumnName("hp");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Race")
                        .HasColumnType("integer")
                        .HasColumnName("race");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d775d10a-ab21-439e-8fb6-75506a5095e2",
                            AccessFailedCount = 0,
                            Class = 1,
                            ConcurrencyStamp = "6d662e7a-3fcb-4833-890c-3c82fcb3d6f6",
                            Email = "juha88@gmail.com",
                            EmailConfirmed = false,
                            Exp = 50,
                            Hp = 100,
                            InventoryId = "f55b1758-bcec-4679-b11b-0158813a66a7",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Race = 1,
                            Role = 1,
                            SecurityStamp = "8c9a6f47-3b62-4180-9e57-01d12398bfd7",
                            TwoFactorEnabled = false,
                            UserName = "Juha88"
                        },
                        new
                        {
                            Id = "b0afa3d2-2a85-4668-84fc-6234649a57b6",
                            AccessFailedCount = 0,
                            Class = 6,
                            ConcurrencyStamp = "1257a416-0d5a-4b46-a85b-a31cc2d5f628",
                            Email = "tyler1@gmail.com",
                            EmailConfirmed = false,
                            Exp = 70,
                            Hp = 150,
                            InventoryId = "d2c21b88-3f84-4645-8e71-10b69c537bc5",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Race = 0,
                            Role = 1,
                            SecurityStamp = "c4a9f5b7-9749-4950-bdf6-cc25d97f6152",
                            TwoFactorEnabled = false,
                            UserName = "Tyler1"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("shops");

                    b.HasData(
                        new
                        {
                            Id = "dc88c684-7494-42a8-8c75-53b5bd6a0016",
                            InventoryId = "b100ae64-7302-4ac5-b389-3c13b1eeb76b",
                            Name = "Potion Dealer"
                        },
                        new
                        {
                            Id = "40d3db10-a79e-4119-9051-0488c270ba4b",
                            InventoryId = "2f4dbcef-d865-4525-8233-26142f311aee",
                            Name = "Weapons Shop"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerApplication.Models.Item", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Message", b =>
                {
                    b.HasOne("PlayerApplication.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerApplication.Models.Player", "Player")
                        .WithMany("Messages")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Shop", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PlayerApplication.Models.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
