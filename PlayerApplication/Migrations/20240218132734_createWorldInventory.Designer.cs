// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlayerApplication.Data;

#nullable disable

namespace PlayerApplication.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240218132734_createWorldInventory")]
    partial class createWorldInventory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlayerApplication.Models.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.HasKey("Id");

                    b.ToTable("chat");

                    b.HasData(
                        new
                        {
                            Id = "7eab79c3-0e32-441b-92c9-85b1068c8ee7",
                            Channel = "Global"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("inventories");

                    b.HasData(
                        new
                        {
                            Id = "0363f4bb-1733-4305-bfc7-9193ef6cd9b9"
                        },
                        new
                        {
                            Id = "e8c7fb0d-f1f5-46c0-85c8-10639ea4ca9a"
                        },
                        new
                        {
                            Id = "dde1b9da-9fa5-469f-96d8-71fc0ae9658c"
                        },
                        new
                        {
                            Id = "6ff04a16-8061-471f-85fb-19156ec97482"
                        },
                        new
                        {
                            Id = "00dfbbf1-b1bc-4f52-be8a-c23dbb628108"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("items");

                    b.HasData(
                        new
                        {
                            Id = "9f0aa512-c858-439c-b366-15ea99a9bf37",
                            Description = "Heals 3 hp",
                            InventoryId = "00dfbbf1-b1bc-4f52-be8a-c23dbb628108",
                            Name = "Green herb",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "64fb6fd3-731a-485f-842d-36cc3fdde11a",
                            Description = "Heals 5 hp",
                            InventoryId = "0363f4bb-1733-4305-bfc7-9193ef6cd9b9",
                            Name = "Small Healing Potion",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "e0f44726-878c-4a10-aac9-731bc51353a3",
                            Description = "Heals 20 hp",
                            InventoryId = "0363f4bb-1733-4305-bfc7-9193ef6cd9b9",
                            Name = "Large Healing Potion",
                            Price = 10f
                        },
                        new
                        {
                            Id = "10d68a72-2be7-437e-a27a-585a8418f5c1",
                            Description = "Deals 5 damage",
                            InventoryId = "e8c7fb0d-f1f5-46c0-85c8-10639ea4ca9a",
                            Name = "Two handed sword",
                            Price = 50f
                        },
                        new
                        {
                            Id = "cdbb4d1e-cffb-4530-adac-2b003676155f",
                            Description = "Deals 3 fire damage",
                            InventoryId = "e8c7fb0d-f1f5-46c0-85c8-10639ea4ca9a",
                            Name = "Magic staff",
                            Price = 60f
                        },
                        new
                        {
                            Id = "da704cfa-db21-4aeb-848c-0f6d17f55549",
                            Description = "Heals 5 hp",
                            InventoryId = "dde1b9da-9fa5-469f-96d8-71fc0ae9658c",
                            Name = "Small Healing Potion",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "d1581178-0477-4e13-8336-bd721689ecda",
                            Description = "Heals 20 hp",
                            InventoryId = "6ff04a16-8061-471f-85fb-19156ec97482",
                            Name = "Large Healing Potion",
                            Price = 10f
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Message", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<string>("ChatId")
                        .HasColumnType("text")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("post_date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("PlayerId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("messages");

                    b.HasData(
                        new
                        {
                            PlayerId = "9886e82e-0b2d-4d78-a061-b8d4694a08fa",
                            ChatId = "7eab79c3-0e32-441b-92c9-85b1068c8ee7",
                            PostDate = new DateTime(2024, 2, 18, 13, 27, 34, 401, DateTimeKind.Utc).AddTicks(5656),
                            Text = "Hi yall!"
                        },
                        new
                        {
                            PlayerId = "b3c47842-36f7-40fb-a3c1-c058df671094",
                            ChatId = "7eab79c3-0e32-441b-92c9-85b1068c8ee7",
                            PostDate = new DateTime(2024, 2, 18, 13, 27, 34, 401, DateTimeKind.Utc).AddTicks(5728),
                            Text = "Hi new user!"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Class")
                        .HasColumnType("integer")
                        .HasColumnName("class");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Exp")
                        .HasColumnType("integer")
                        .HasColumnName("exp");

                    b.Property<int>("Hp")
                        .HasColumnType("integer")
                        .HasColumnName("hp");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Money")
                        .HasColumnType("real")
                        .HasColumnName("money");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Race")
                        .HasColumnType("integer")
                        .HasColumnName("race");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9886e82e-0b2d-4d78-a061-b8d4694a08fa",
                            AccessFailedCount = 0,
                            Class = 1,
                            ConcurrencyStamp = "8480d081-a808-449d-99b6-523eb617c773",
                            Email = "juha88@gmail.com",
                            EmailConfirmed = false,
                            Exp = 50,
                            Hp = 100,
                            InventoryId = "dde1b9da-9fa5-469f-96d8-71fc0ae9658c",
                            LockoutEnabled = false,
                            Money = 50f,
                            PhoneNumberConfirmed = false,
                            Race = 1,
                            Role = 1,
                            SecurityStamp = "aceca4ab-727e-450a-ac98-d82f3601bc76",
                            TwoFactorEnabled = false,
                            UserName = "Juha88"
                        },
                        new
                        {
                            Id = "b3c47842-36f7-40fb-a3c1-c058df671094",
                            AccessFailedCount = 0,
                            Class = 6,
                            ConcurrencyStamp = "60db261d-f99f-427b-ac71-c6e88282aaa0",
                            Email = "tyler1@gmail.com",
                            EmailConfirmed = false,
                            Exp = 70,
                            Hp = 150,
                            InventoryId = "6ff04a16-8061-471f-85fb-19156ec97482",
                            LockoutEnabled = false,
                            Money = 50f,
                            PhoneNumberConfirmed = false,
                            Race = 0,
                            Role = 1,
                            SecurityStamp = "374eeb6b-0360-499c-bdb3-f46d43c86b03",
                            TwoFactorEnabled = false,
                            UserName = "Tyler1"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("shops");

                    b.HasData(
                        new
                        {
                            Id = "563c9f7f-eea2-47ac-b480-72e147400a2b",
                            InventoryId = "0363f4bb-1733-4305-bfc7-9193ef6cd9b9",
                            Name = "Potion Dealer"
                        },
                        new
                        {
                            Id = "17418100-67cb-4ea2-8eff-176169e77be6",
                            InventoryId = "e8c7fb0d-f1f5-46c0-85c8-10639ea4ca9a",
                            Name = "Weapons Shop"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerApplication.Models.Item", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Message", b =>
                {
                    b.HasOne("PlayerApplication.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerApplication.Models.Player", "Player")
                        .WithMany("Messages")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Shop", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PlayerApplication.Models.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
