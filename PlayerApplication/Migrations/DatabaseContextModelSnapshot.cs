// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlayerApplication.Data;

#nullable disable

namespace PlayerApplication.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PlayerApplication.Models.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("channel");

                    b.HasKey("Id");

                    b.ToTable("chat");

                    b.HasData(
                        new
                        {
                            Id = "20301f3d-0c30-43d8-af58-607fc1680b09",
                            Channel = "Global"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Inventory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("inventories");

                    b.HasData(
                        new
                        {
                            Id = "9210233a-a3b1-4f61-a18f-07f94c5525e1"
                        },
                        new
                        {
                            Id = "c566d097-7560-4a8f-b19b-d01c031857cf"
                        },
                        new
                        {
                            Id = "9d3604b6-dbc2-4f66-941d-b163f6f98cf8"
                        },
                        new
                        {
                            Id = "03671655-9f56-4966-bdda-559762aac41f"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("items");

                    b.HasData(
                        new
                        {
                            Id = "147016b1-c866-4776-8bf4-a499d31ef4db",
                            Description = "Heals 5 hp",
                            InventoryId = "9210233a-a3b1-4f61-a18f-07f94c5525e1",
                            Name = "Small Healing Potion",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "13a1bd68-9705-4724-bf31-c91fb35fc3fb",
                            Description = "Heals 20 hp",
                            InventoryId = "9210233a-a3b1-4f61-a18f-07f94c5525e1",
                            Name = "Large Healing Potion",
                            Price = 10f
                        },
                        new
                        {
                            Id = "96fd0f06-a8d2-469c-b634-aa90616a9780",
                            Description = "Deals 5 damage",
                            InventoryId = "c566d097-7560-4a8f-b19b-d01c031857cf",
                            Name = "Two handed sword",
                            Price = 50f
                        },
                        new
                        {
                            Id = "689bee58-bb77-4983-ac94-641f275e4b7c",
                            Description = "Deals 3 fire damage",
                            InventoryId = "c566d097-7560-4a8f-b19b-d01c031857cf",
                            Name = "Magic staff",
                            Price = 60f
                        },
                        new
                        {
                            Id = "b9a6ed1a-b68f-4778-8603-1fdeee6e52c0",
                            Description = "Heals 5 hp",
                            InventoryId = "9d3604b6-dbc2-4f66-941d-b163f6f98cf8",
                            Name = "Small Healing Potion",
                            Price = 2.5f
                        },
                        new
                        {
                            Id = "8bfbc896-0066-4c15-85ed-377840b49d81",
                            Description = "Heals 20 hp",
                            InventoryId = "03671655-9f56-4966-bdda-559762aac41f",
                            Name = "Large Healing Potion",
                            Price = 10f
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Message", b =>
                {
                    b.Property<string>("PlayerId")
                        .HasColumnType("text")
                        .HasColumnName("player_id");

                    b.Property<string>("ChatId")
                        .HasColumnType("text")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("post_date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("PlayerId", "ChatId");

                    b.HasIndex("ChatId");

                    b.ToTable("messages");

                    b.HasData(
                        new
                        {
                            PlayerId = "b85fbdbc-cea6-47ce-9d0e-18cbe49d48de",
                            ChatId = "20301f3d-0c30-43d8-af58-607fc1680b09",
                            PostDate = new DateTime(2024, 2, 16, 13, 20, 42, 518, DateTimeKind.Utc).AddTicks(3710),
                            Text = "Hi yall!"
                        },
                        new
                        {
                            PlayerId = "1e6c048e-c80d-4b93-898a-9880e4880bcc",
                            ChatId = "20301f3d-0c30-43d8-af58-607fc1680b09",
                            PostDate = new DateTime(2024, 2, 16, 13, 20, 42, 518, DateTimeKind.Utc).AddTicks(3809),
                            Text = "Hi new user!"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int>("Class")
                        .HasColumnType("integer")
                        .HasColumnName("class");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Exp")
                        .HasColumnType("integer")
                        .HasColumnName("exp");

                    b.Property<int>("Hp")
                        .HasColumnType("integer")
                        .HasColumnName("hp");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Money")
                        .HasColumnType("real")
                        .HasColumnName("money");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Race")
                        .HasColumnType("integer")
                        .HasColumnName("race");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b85fbdbc-cea6-47ce-9d0e-18cbe49d48de",
                            AccessFailedCount = 0,
                            Class = 1,
                            ConcurrencyStamp = "86539d50-abae-46cd-a4d3-aa19f14c580d",
                            Email = "juha88@gmail.com",
                            EmailConfirmed = false,
                            Exp = 50,
                            Hp = 100,
                            InventoryId = "9d3604b6-dbc2-4f66-941d-b163f6f98cf8",
                            LockoutEnabled = false,
                            Money = 50f,
                            PhoneNumberConfirmed = false,
                            Race = 1,
                            Role = 1,
                            SecurityStamp = "88754046-870e-445d-a043-944651165db6",
                            TwoFactorEnabled = false,
                            UserName = "Juha88"
                        },
                        new
                        {
                            Id = "1e6c048e-c80d-4b93-898a-9880e4880bcc",
                            AccessFailedCount = 0,
                            Class = 6,
                            ConcurrencyStamp = "b87c48f2-e1e6-4560-9678-acff6da00a82",
                            Email = "tyler1@gmail.com",
                            EmailConfirmed = false,
                            Exp = 70,
                            Hp = 150,
                            InventoryId = "03671655-9f56-4966-bdda-559762aac41f",
                            LockoutEnabled = false,
                            Money = 50f,
                            PhoneNumberConfirmed = false,
                            Race = 0,
                            Role = 1,
                            SecurityStamp = "b5f0b76d-5b79-4a72-a02d-b10ec6af6454",
                            TwoFactorEnabled = false,
                            UserName = "Tyler1"
                        });
                });

            modelBuilder.Entity("PlayerApplication.Models.Shop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("InventoryId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("inventory_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("InventoryId");

                    b.ToTable("shops");

                    b.HasData(
                        new
                        {
                            Id = "dcb5b575-7473-48d5-9da5-66aa1537f2fa",
                            InventoryId = "9210233a-a3b1-4f61-a18f-07f94c5525e1",
                            Name = "Potion Dealer"
                        },
                        new
                        {
                            Id = "41776c73-bb90-4c25-83b1-4e954366364b",
                            InventoryId = "c566d097-7560-4a8f-b19b-d01c031857cf",
                            Name = "Weapons Shop"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PlayerApplication.Models.Player", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerApplication.Models.Item", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany("Items")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Message", b =>
                {
                    b.HasOne("PlayerApplication.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayerApplication.Models.Player", "Player")
                        .WithMany("Messages")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Shop", b =>
                {
                    b.HasOne("PlayerApplication.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("PlayerApplication.Models.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("PlayerApplication.Models.Inventory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("PlayerApplication.Models.Player", b =>
                {
                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
